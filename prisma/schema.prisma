generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String             @id @default(cuid())
  email           String             @unique
  name            String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  emailVerified   DateTime?
  image           String?
  authAccounts    Account[]
  accounts        ConnectedAccount[]
  jiraIssueCaches JiraIssueCache[]
  scheduleBlocks  ScheduleBlock[]
  sessions        Session[]
  settings        Settings?
  timeEntries     TimeEntry[]
  todayIssues     TodayIssue[]
  TodayEntry      TodayEntry[]
  DailyStats      DailyStats[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ConnectedAccount {
  id           String    @id @default(cuid())
  userId       String
  provider     String
  accountId    String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  scopes       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
}

model JiraIssueCache {
  id         String   @id @default(cuid())
  userId     String
  issueKey   String
  summary    String
  status     String
  assignee   String?
  projectKey String?
  updatedAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, issueKey])
}

model TodayIssue {
  id         String   @id @default(cuid())
  userId     String
  issueKey   String
  orderIndex Int
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, issueKey])
  @@index([userId, orderIndex])
}

model ScheduleBlock {
  id              String   @id @default(cuid())
  userId          String
  sourceType      String
  sourceId        String?
  title           String
  start           DateTime
  end             DateTime
  provider        String?
  providerEventId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId, start])
}

model TimeEntry {
  id                    String    @id @default(cuid())
  userId                String
  sourceType            String
  sourceId              String?
  startedAt             DateTime
  endedAt               DateTime?
  note                  String?
  pushedToJiraWorklogAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id])

  @@index([userId, startedAt])
}

model Settings {
  id                            String           @id @default(cuid())
  userId                        String           @unique
  workdayStart                  DateTime?
  workdayEnd                    DateTime?
  defaultWorklogCommentTemplate String?
  timezone                      String?
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime         @updatedAt
  atlassianSyncIntervalMinutes  Int?
  autoPushWorklog               Boolean          @default(false)
  googleSyncIntervalMinutes     Int?
  microsoftSyncIntervalMinutes  Int?
  user                          User             @relation(fields: [userId], references: [id])
  // Calendar range controls (months before/after current month)
  googleMonthsBefore            Int?
  googleMonthsAfter             Int?
  microsoftMonthsBefore         Int?
  microsoftMonthsAfter          Int?
  // Jira selections
  jiraSelectedProjectKeys       String[]         @default([])
  jiraSelectedDashboardIds      String[]         @default([])
  // Dashboard layout preferences
  dashboardLayout               DashboardLayout?
  dashboardZones                Json?
  // Theme preference
  theme                         ThemePreference? @default(system)
}

enum DashboardLayout {
  threeColumn
  twoByTwo
  split
}

enum TodayKind {
  calendar
  schedule
  jira
}

enum ThemePreference {
  light
  dark
  system
}

model TodayEntry {
  id        String    @id @default(cuid())
  userId    String
  dateISO   String // YYYY-MM-DD UTC
  kind      TodayKind
  provider  String?
  sourceId  String
  title     String
  start     DateTime?
  end       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, dateISO, kind, sourceId])
  @@index([userId, dateISO])
}

model DailyStats {
  id        String    @id @default(cuid())
  userId    String
  dateISO   String // YYYY-MM-DD UTC
  dayStart  DateTime?
  dayEnd    DateTime?
  workMs    Int       @default(0)
  breakMs   Int       @default(0)
  meetingMs Int       @default(0)
  focusMs   Int       @default(0)
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, dateISO])
}
